// <auto-generated />
using System;
using App_Progetto.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App_Progetto.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("App_Progetto.Models.Attuatore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Attivazione")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Standby")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TerrenoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoAttuatore")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TerrenoId");

                    b.ToTable("Attuatore", (string)null);
                });

            modelBuilder.Entity("App_Progetto.Models.Gestione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ruolo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TerrenoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TerrenoId");

                    b.ToTable("Gestione", (string)null);
                });

            modelBuilder.Entity("App_Progetto.Models.Misurazione", b =>
                {
                    b.Property<DateTime>("DataOra")
                        .HasColumnType("TEXT");

                    b.Property<int>("CodiceSensore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoMisurazione")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Valore")
                        .HasColumnType("REAL");

                    b.HasKey("DataOra", "CodiceSensore");

                    b.HasIndex("CodiceSensore");

                    b.ToTable("Misurazione", (string)null);
                });

            modelBuilder.Entity("App_Progetto.Models.Piano", b =>
                {
                    b.Property<int>("CodicePiano")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CodAtt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CondAttivazione")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CondDisattivazione")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("OrarioAttDefault")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("OrarioAttivazione")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("OrarioDisattDefault")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("OrarioDisattivazione")
                        .HasColumnType("TEXT");

                    b.HasKey("CodicePiano");

                    b.HasIndex("CodAtt")
                        .IsUnique();

                    b.ToTable("Piano", (string)null);
                });

            modelBuilder.Entity("App_Progetto.Models.Sensore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("StatoSensore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TerrenoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoSensore")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TerrenoId");

                    b.ToTable("Sensore", (string)null);
                });

            modelBuilder.Entity("App_Progetto.Models.Terreno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CittaTerreno")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Ettari")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Foglio")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mappale")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoColtura")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoTerreno")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Terreno", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App_Progetto.Models.Attuatore", b =>
                {
                    b.HasOne("App_Progetto.Models.Terreno", "Terreno")
                        .WithMany("Attuatores")
                        .HasForeignKey("TerrenoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Terreno");
                });

            modelBuilder.Entity("App_Progetto.Models.Gestione", b =>
                {
                    b.HasOne("App_Progetto.Models.Terreno", "Terreno")
                        .WithMany("Gestiones")
                        .HasForeignKey("TerrenoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Terreno");
                });

            modelBuilder.Entity("App_Progetto.Models.Misurazione", b =>
                {
                    b.HasOne("App_Progetto.Models.Sensore", "Sensores")
                        .WithMany("Misuraziones")
                        .HasForeignKey("CodiceSensore")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensores");
                });

            modelBuilder.Entity("App_Progetto.Models.Piano", b =>
                {
                    b.HasOne("App_Progetto.Models.Attuatore", "Attuatores")
                        .WithOne("Pianos")
                        .HasForeignKey("App_Progetto.Models.Piano", "CodAtt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attuatores");
                });

            modelBuilder.Entity("App_Progetto.Models.Sensore", b =>
                {
                    b.HasOne("App_Progetto.Models.Terreno", "Terreno")
                        .WithMany("Sensores")
                        .HasForeignKey("TerrenoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Terreno");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App_Progetto.Models.Attuatore", b =>
                {
                    b.Navigation("Pianos")
                        .IsRequired();
                });

            modelBuilder.Entity("App_Progetto.Models.Sensore", b =>
                {
                    b.Navigation("Misuraziones");
                });

            modelBuilder.Entity("App_Progetto.Models.Terreno", b =>
                {
                    b.Navigation("Attuatores");

                    b.Navigation("Gestiones");

                    b.Navigation("Sensores");
                });
#pragma warning restore 612, 618
        }
    }
}
