@model Role

@{
    ViewData["Title"] = "Manage Roles";
}

<form method="post">
    <div class="card mt-4">
        <div class="card-header">
            <h2>@Model.UserName</h2>
            Add/Remove Roles
        </div>
        <div class="card-body">
            <input type="hidden" asp-for="UserId" />
            @for (int i = 0; i < Model.Roles.Count; i++)
            {
                <div class="form-check m-1">
                    <input type="hidden" asp-for="@Model.Roles[i].RoleName" />
                    <input asp-for="@Model.Roles[i].IsSelected" class="form-check-input" />
                    <label class="form-check-label" asp-for="@Model.Roles[i].IsSelected">
                        @Model.Roles[i].RoleName
                    </label>
                </div>
            }
            <div asp-validation-summary="All" class="text-danger"></div>
        </div>
        <div class="card-footer">
            <button type="submit" class="btn btn-primary">Save</button>
            <a asp-action="Index" class="btn btn-secondary">Cancel</a>
        </div>
    </div>
</form>


    [Authorize(Roles = "Admin")]
    public async Task<IActionResult>
        ManageRoles(string userId)
        {
        var user = await _userManager.FindByIdAsync(userId);

        if (user == null)
        return NotFound();

        var roles = await _roleManager.Roles.ToListAsync();

        var viewModel = new UserRolesViewModel
        {
        UserId = user.Id,
        UserName = user.UserName,
        Roles = roles.Select(role => new RoleViewModel
        {
        RoleId = role.Id,
        RoleName = role.Name,
        IsSelected = _userManager.IsInRoleAsync(user, role.Name).Result
        }).ToList()
        };

        return View(viewModel);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult>
            ManageRoles(UserRolesViewModel model)
            {
            var user = await _userManager.FindByIdAsync(model.UserId);

            if (user == null)
            return NotFound();

            var userRoles = await _userManager.GetRolesAsync(user);

            foreach (var role in model.Roles)
            {
            if (userRoles.Any(r => r == role.RoleName) && !role.IsSelected)
            await _userManager.RemoveFromRoleAsync(user, role.RoleName);

            if (!userRoles.Any(r => r == role.RoleName) && role.IsSelected)
            await _userManager.AddToRoleAsync(user, role.RoleName);
            }

            return RedirectToAction(nameof(Index));
            }
